@page "/cadastro-cliente"
@using System.ComponentModel.DataAnnotations
@using OrderFlow.Client.Services
@inject ICustomerService _customerService
@inject ISnackbar SnackBar
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Cadastro de Cliente</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.Name" Label="Nome" Required="true"
                                  RequiredError="Nome é obrigatório"/>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.Email" Label="Email" Required="true"
                                  RequiredError="Email é obrigatório"
                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "Email inválido" })"/>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.Phone" Label="Telefone" Required="true"
                                  RequiredError="Telefone é obrigatório"/>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="model.DocumentId" Label="CPF/CNPJ" Required="true"
                                  RequiredError="Documento é obrigatório"/>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-6"/>

            <MudExpansionPanels>
                @foreach (var address in model.Address)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <MudText Typo="Typo.h6">Endereço - @address.AddressType</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudSelect @bind-Value="_typeAddressSelected" Label="Tipo de Endereço"
                                               Required="true">
                                        @foreach (var type in Enum.GetValues(typeof(TypeAddress)))
                                        {
                                            <MudSelectItem Value="@((TypeAddress)type)">@type</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="8">
                                    <MudTextField @bind-Value="address.Street" Label="Logradouro" Required="true"
                                                  RequiredError="Logradouro é obrigatório"/>
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="address.Number" Label="Número" Required="true"
                                                  RequiredError="Número é obrigatório"/>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="address.Complement" Label="Complemento"/>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="address.Neighborhood" Label="Bairro" Required="true"
                                                  RequiredError="Bairro é obrigatório"/>
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="address.City" Label="Cidade" Required="true"
                                                  RequiredError="Cidade é obrigatória"/>
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="address.State" Label="Estado" Required="true"
                                                  RequiredError="Estado é obrigatório"/>
                                </MudItem>
                                <MudItem xs="12" sm="4">
                                    <MudTextField @bind-Value="address.ZipCode" Label="CEP" Required="true"
                                                  RequiredError="CEP é obrigatório"/>
                                </MudItem>
                            </MudGrid>
                            <MudButton OnClick="@(() => RemoveAddress(address))" Variant="Variant.Filled"
                                       Color="Color.Error" Class="mt-4">
                                Remover Endereço
                            </MudButton>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>

            <MudButton OnClick="@AddAddress" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
                Adicionar Endereço
            </MudButton>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton OnClick="@Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)">Salvar
        </MudButton>
        <MudButton OnClick="@Reset" Variant="Variant.Outlined" Color="Color.Secondary">Limpar</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private CustomerModel model = new CustomerModel();
    private bool success;
    private string[] errors = { };
    private MudForm form;
    private TypeAddress _typeAddressSelected = TypeAddress.Residencial;

    protected override void OnInitialized()
    {
        model.Address = new List<AddressModel>();
        AddAddress();
    }

    private void AddAddress()
    {
        model.Address.Add(new AddressModel { AddressType = _typeAddressSelected.ToString() });
    }

    private void RemoveAddress(AddressModel address)
    {
        if (model.Address.Count > 1)
        {
            model.Address.Remove(address);
        }
    }

    private async Task Submit()
    {
        form.Validate();

        if (success)
        {
            try
            {
                await _customerService.AddCustomerAsync(model);

                // Exibe uma mensagem de sucesso
                SnackBar.Add("Cliente cadastrado com sucesso!", Severity.Success);
                NavigationManager.NavigateTo("/clientes");
            }
            catch (Exception e)
            {
                // Exibe uma mensagem de sucesso
                SnackBar.Add(e.Message, Severity.Error);
            }
        }
    }

    private async Task Reset()
    {
        await form.ResetAsync();
        model = new CustomerModel();
        model.Address = new List<AddressModel>();
        AddAddress();
    }

}

